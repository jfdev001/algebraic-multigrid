name: Linux Static Code Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TESTLIB: testlib  # The name of the main entry point for tests
  TEST_DIR: test

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # TODO: macos and windows?
        os: [ubuntu-latest] # macos-latest]
        build_type: [Developer]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            valgrind_install: sudo apt-get -y install valgrind
          # - os: macos-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
          # - os: macos-latest
          #   valgrind_install: brew install valgrind
        # exclude:
        #   - os: macos-latest
        #     c_compiler: gcc
      
    steps:
    - uses: actions/checkout@v3

    - name: Set Reusable Strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-test-output-dir=${{ github.workspace }}/build-test" >> "$GITHUB_OUTPUT"

    - name: Installing Valgrind
      run: ${{ matrix.valgrind_install }}

    - name: Configure Static Analysis CMake
      run: >
        cmake -S ${{github.workspace}}
        -B ${{ steps.strings.outputs.build-test-output-dir}} 
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Static Analysis Developer Build
      run: cmake --build ${{ steps.strings.outputs.build-test-output-dir }} --config ${{ matrix.build_type }}
  
    - name: Multiplatform SCA (Valgrind)
      working-directory: ${{ steps.strings.outputs.build-test-output-dir}} 
      run: ctest -T memcheck -R ${{ env.TESTLIB }} --output-on-failure


